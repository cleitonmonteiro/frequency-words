// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ms.proto

package ms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FrequencyWord struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Frequency            int64    `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencyWord) Reset()         { *m = FrequencyWord{} }
func (m *FrequencyWord) String() string { return proto.CompactTextString(m) }
func (*FrequencyWord) ProtoMessage()    {}
func (*FrequencyWord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cec60a235761cc1, []int{0}
}

func (m *FrequencyWord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrequencyWord.Unmarshal(m, b)
}
func (m *FrequencyWord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrequencyWord.Marshal(b, m, deterministic)
}
func (m *FrequencyWord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyWord.Merge(m, src)
}
func (m *FrequencyWord) XXX_Size() int {
	return xxx_messageInfo_FrequencyWord.Size(m)
}
func (m *FrequencyWord) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyWord.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyWord proto.InternalMessageInfo

func (m *FrequencyWord) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *FrequencyWord) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type Text struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cec60a235761cc1, []int{1}
}

func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Response struct {
	FrequencyAll         []*FrequencyWord `protobuf:"bytes,1,rep,name=FrequencyAll,proto3" json:"FrequencyAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cec60a235761cc1, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetFrequencyAll() []*FrequencyWord {
	if m != nil {
		return m.FrequencyAll
	}
	return nil
}

func init() {
	proto.RegisterType((*FrequencyWord)(nil), "ms.FrequencyWord")
	proto.RegisterType((*Text)(nil), "ms.Text")
	proto.RegisterType((*Response)(nil), "ms.Response")
}

func init() { proto.RegisterFile("ms.proto", fileDescriptor_3cec60a235761cc1) }

var fileDescriptor_3cec60a235761cc1 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0x2d, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0x2d, 0x56, 0x72, 0xe4, 0xe2, 0x75, 0x2b, 0x4a, 0x2d,
	0x2c, 0x4d, 0xcd, 0x4b, 0xae, 0x0c, 0xcf, 0x2f, 0x4a, 0x11, 0x12, 0xe2, 0x62, 0x29, 0xcf, 0x2f,
	0x4a, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x64, 0xb8, 0x38, 0xd3, 0x60,
	0x8a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x10, 0x02, 0x4a, 0x52, 0x5c, 0x2c, 0x21, 0xa9,
	0x15, 0x25, 0x20, 0x9d, 0x49, 0xf9, 0x29, 0x95, 0x30, 0x9d, 0x20, 0xb6, 0x92, 0x23, 0x17, 0x47,
	0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x29, 0x17, 0x0f, 0xdc, 0x2a, 0xc7, 0x9c,
	0x1c, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x41, 0xbd, 0xdc, 0x62, 0x3d, 0x14, 0x27, 0x04,
	0xa1, 0x28, 0x33, 0x32, 0xe7, 0xe2, 0x43, 0x91, 0x2e, 0x16, 0x52, 0xe5, 0xe2, 0x84, 0x8b, 0x08,
	0x71, 0x80, 0xf4, 0x83, 0xec, 0x97, 0xe2, 0x01, 0xb1, 0x60, 0xb6, 0x29, 0x31, 0x24, 0xb1, 0x81,
	0x7d, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xc4, 0xa3, 0x23, 0xf1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrequencyWordsClient is the client API for FrequencyWords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrequencyWordsClient interface {
	Frequency(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Response, error)
}

type frequencyWordsClient struct {
	cc *grpc.ClientConn
}

func NewFrequencyWordsClient(cc *grpc.ClientConn) FrequencyWordsClient {
	return &frequencyWordsClient{cc}
}

func (c *frequencyWordsClient) Frequency(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ms.FrequencyWords/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrequencyWordsServer is the server API for FrequencyWords service.
type FrequencyWordsServer interface {
	Frequency(context.Context, *Text) (*Response, error)
}

// UnimplementedFrequencyWordsServer can be embedded to have forward compatible implementations.
type UnimplementedFrequencyWordsServer struct {
}

func (*UnimplementedFrequencyWordsServer) Frequency(ctx context.Context, req *Text) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}

func RegisterFrequencyWordsServer(s *grpc.Server, srv FrequencyWordsServer) {
	s.RegisterService(&_FrequencyWords_serviceDesc, srv)
}

func _FrequencyWords_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyWordsServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ms.FrequencyWords/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyWordsServer).Frequency(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrequencyWords_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ms.FrequencyWords",
	HandlerType: (*FrequencyWordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Frequency",
			Handler:    _FrequencyWords_Frequency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ms.proto",
}
